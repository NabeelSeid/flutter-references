import 'dart:io';

import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:internationalization/l10n/messages_all.dart';

import 'package:internationalization/services/multi_preferecnce.dart';

const List<String> _kSupportedLanguages = ["en", "am"];
const String _kDefaultLanguage = "am";

class GlobalLocalizations {
  Locale _locale;

  ///
  /// Returns the list of supported locales
  ///
  Iterable<Locale> supportedLocales() =>
      _kSupportedLanguages.map<Locale>((lang) => Locale(lang, ''));

  // set up lookups for localized values
  String get title {
    return Intl.message(
      'Internationalization',
      name: 'title',
    );
  }

  String get bodyText {
    return Intl.message(
      'Hello World',
      name: 'bodyText',
    );
  }

  Locale get locale => _locale;

  ///
  /// One-time initialization
  ///
  Future<Null> init() async {
    if (_locale == null) {
      await setNewLanguage();
    }
    return null;
  }

  ///
  /// Routine to change the language
  ///
  Future<Null> setNewLanguage([String newLanguage]) async {
    String language = newLanguage;
    if (language == null) {
      language = await preferences.getPreferredLanguage();
    }

    // If not in the preferences, get the current locale (as defined at the device settings level)
    if (language == '') {
      String currentLocale = Platform.localeName.toLowerCase();
      if (currentLocale.length > 2) {
        if (currentLocale[2] == "-" || currentLocale[2] == "_") {
          language = currentLocale.substring(0, 2);
        }
      }
    }

    // Check if we are supporting the language
    // if not consider the default one
    if (!_kSupportedLanguages.contains(language)) {
      language = _kDefaultLanguage;
    }

    // Set the Locale
    _locale = Locale(language, "");

    // loads localized value based on given locale
    final String name =
        _locale.countryCode.isEmpty ? _locale.languageCode : _locale.toString();

    final String localeName = Intl.canonicalizedLocale(name);

    // this method is auto generated by intl generator
    await initializeMessages(localeName);

    Intl.defaultLocale = localeName;

    return null;
  }

  /// ==========================================================
  /// Singleton Factory
  ///
  static final GlobalLocalizations _translations =
      GlobalLocalizations._internal();
  factory GlobalLocalizations() {
    return _translations;
  }
  GlobalLocalizations._internal();
}

GlobalLocalizations allTranslations = GlobalLocalizations();
